{
  "timestamp": "2025-09-28T01:43:32.864Z",
  "summary": {
    "total": 4,
    "passed": 3,
    "failed": 1,
    "critical_failures": 1
  },
  "results": [
    {
      "name": "Daily QC Report",
      "status": "PASSED",
      "output": "\n> vite_react_shadcn_ts@0.0.0 play:qc:daily\n> node automations/lib/yaml-runner.js automations/ig/qc-daily-report.yml\n\n🚀 Starting YAML playbook: qc-daily-report.yml\n📂 Working directory: /Users/abraraslam/Desktop/wedding-vendor-chronicles\n📋 Playbook: Instagram Vendor Quality Control - Daily Report\n📝 Description: Generate a daily quality control snapshot of Instagram vendor data\n\n🔄 Step 1: Generate daily QC report header\nℹ️ 📊 Instagram Vendor Quality Control Report - 2025-09-28\n✅ Step 1: Completed\n\n🔄 Step 2: Query vendor status summary\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: status_summary\n✅ Step 2: Completed\n\n🔄 Step 3: Display status summary table\n⏭️  Step 3: Condition not met, skipping\n\n🔄 Step 4: Query vendors with quality issues\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: quality_issues\n✅ Step 4: Completed\n\n🔄 Step 5: Display quality issues header\n⏭️  Step 5: Condition not met, skipping\n\n🔄 Step 6: Display quality issues by category\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: issues_by_category\n✅ Step 6: Completed\n\n🔄 Step 7: Display issues by category\n⏭️  Step 7: Condition not met, skipping\n\n🔄 Step 8: Display individual vendor issues\n⏭️  Step 8: Condition not met, skipping\n\n🔄 Step 9: Query vendors missing avatars\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: avatar_stats\n✅ Step 9: Completed\n\n🔄 Step 10: Display avatar statistics\n⏭️  Step 10: Condition not met, skipping\n\n🔄 Step 11: Query refresh schedule status\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: refresh_stats\n✅ Step 11: Completed\n\n🔄 Step 12: Display refresh schedule status\n⏭️  Step 12: Condition not met, skipping\n\n🔄 Step 13: Calculate quality score statistics\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: quality_scores\n✅ Step 13: Completed\n\n🔄 Step 14: Display quality score summary\n⏭️  Step 14: Condition not met, skipping\n\n🔄 Step 15: Generate summary recommendations\nℹ️ \n╔══════════════════════════════════════════════════════════════════════╗\n║                            RECOMMENDATIONS                           ║\n╚══════════════════════════════════════════════════════════════════════╝\nundefined\nundefined\nundefined\nundefined\n\nReport generated: 2025-09-28T01:43:14.116Z\n\n✅ Step 15: Completed\n\n🔄 Step 16: Store QC report results\nℹ️ QC Daily Report completed successfully\n✅ Step 16: Completed\n✅ Playbook completed successfully\n",
      "error": null,
      "critical": false
    },
    {
      "name": "Tier Backfill",
      "status": "FAILED",
      "output": "\n> vite_react_shadcn_ts@0.0.0 play:backfill:tier\n> node automations/lib/yaml-runner.js automations/ig/backfill-tier.yml\n\n🚀 Starting YAML playbook: backfill-tier.yml\n📂 Working directory: /Users/abraraslam/Desktop/wedding-vendor-chronicles\n📋 Playbook: Instagram Vendor Backfill by Tier\n📝 Description: Discover and enrich Instagram vendors for a specific tier from seed data\n\n🔄 Step 1: Load seed data for tier\n📊 Reading CSV with filter: { TIER: 'tier1' }\n📊 Read 0 rows from ig_mcp_apify_seed.csv (filtered from 0unknown total)\n📝 Registered result as: tier_seeds\n✅ Step 1: Completed\n\n🔄 Step 2: Log tier processing start\nℹ️ Processing 0 seed entries for Tier tier1\n✅ Step 2: Completed\n\n🔄 Step 3: Initialize discovered usernames collection\n📦 Stored collection 'discovered_usernames' with 0 items\n✅ Step 3: Completed\n\n🔄 Step 4: Discover Instagram usernames for each seed\n🔧 MCP Tool: github.com/apify/actors-mcp-server/search-actors\n📊 Arguments: [ 'search', 'limit' ]\n📝 Registered result as: search_results\n✅ Step 4: Completed\n\n🔄 Step 5: Extract usernames from search results\n🔄 Transformed 1 items\n📝 Registered result as: discovered_profiles\n✅ Step 5: Completed\n\n🔄 Step 6: Add discovered profiles to collection\n📦 Stored collection 'discovered_usernames' with 1 items\n✅ Step 6: Completed\n\n🔄 Step 7: Deduplicate discovered usernames\n🔄 Deduplicated 1 items down to 1 (removed 0 duplicates)\n📝 Registered result as: unique_usernames\n✅ Step 7: Completed\n\n🔄 Step 8: Log discovery results\nℹ️ Discovered 1 unique Instagram profiles\n✅ Step 8: Completed\n\n🔄 Step 9: Limit enrichment to max specified\n🔄 Transformed 1 items\n📝 Registered result as: usernames_to_enrich\n✅ Step 9: Completed\n\n🔄 Step 10: Log enrichment start\nℹ️ Enriching 1 profiles (limited by MAX_ENRICH=10)\n✅ Step 10: Completed\n\n🔄 Step 11: Enrich profile details via Apify\n🔧 MCP Tool: github.com/apify/actors-mcp-server/call-actor\n📊 Arguments: [ 'actor', 'step', 'input' ]\n📝 Registered result as: enriched_profiles\n✅ Step 11: Completed\n\n🔄 Step 12: Normalize vendor data\n🔄 Transformed 1 items\n📝 Registered result as: normalized_vendors\n✅ Step 12: Completed\n\n🔄 Step 13: Log normalization results\nℹ️ Normalized 1 vendor profiles\n✅ Step 13: Completed\n\n🔄 Step 14: Buffer normalized vendors for batch processing\n📝 Added 1 items to buffer 'vendor_batch' (total: 1)\n📝 Registered result as: buffer_status\n✅ Step 14: Completed\n\n🔄 Step 15: Flush all vendor batches to ingest API\n",
      "error": "Command failed: npm run play:backfill:tier\n\n<--- Last few GCs --->\n\n[52288:0x148008000]    13782 ms: Scavenge (interleaved) 4063.3 (4127.3) -> 4061.1 (4128.5) MB, pooled: 0 MB, 9.08 / 0.00 ms  (average mu = 0.235, current mu = 0.117) allocation failure; \n[52288:0x148008000]    13828 ms: Scavenge (interleaved) 4064.5 (4128.5) -> 4063.4 (4149.0) MB, pooled: 0 MB, 43.83 / 0.00 ms  (average mu = 0.235, current mu = 0.117) allocation failure; \n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\n----- Native stack trace -----\n\n 1: 0x104593484 node::OOMErrorHandler(char const*, v8::OOMDetails const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 2: 0x104759bfc v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 3: 0x104967b54 v8::internal::Heap::stack() [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 4: 0x104965ef4 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 5: 0x10495a4dc v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 6: 0x10495ad14 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 7: 0x10493e034 v8::internal::Factory::NewFillerObject(int, v8::internal::AllocationAlignment, v8::internal::AllocationType, v8::internal::AllocationOrigin) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 8: 0x104d59710 v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 9: 0x105219af4 Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n10: 0x1051be704 Builtins_ExtractFastJSArray [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n11: 0x105251f94 Builtins_ArrayPrototypeSplice [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n12: 0x10affb120 \n13: 0x10b02f7a0 \n14: 0x10b02e96c \n15: 0x1051c1290 Builtins_AsyncFunctionAwaitResolveClosure [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n16: 0x10528c4d8 Builtins_PromiseFulfillReactionJob [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n17: 0x1051b1594 Builtins_RunMicrotasks [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n18: 0x105182af4 Builtins_JSRunMicrotasksEntry [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n19: 0x1048bfa90 v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n20: 0x1048c0338 v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n21: 0x1048c0470 v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n22: 0x1048ed6ec v8::internal::MicrotaskQueue::RunMicrotasks(v8::internal::Isolate*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n23: 0x1048ede70 v8::internal::MicrotaskQueue::PerformCheckpoint(v8::Isolate*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n24: 0x105186f98 Builtins_CallApiCallbackGeneric [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n25: 0x10b01a3f4 \n26: 0x105182c0c Builtins_JSEntryTrampoline [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n27: 0x1051828f4 Builtins_JSEntry [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n28: 0x1048bfad0 v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n29: 0x1048bf42c v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n30: 0x104770168 v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n31: 0x104499a80 node::InternalCallbackScope::Close() [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n32: 0x104499cc4 node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context, v8::Local<v8::Value>) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n33: 0x1044af16c node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n34: 0x104598fe4 node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n35: 0x104599cd0 node::fs::AfterInteger(uv_fs_s*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n36: 0x10458b9a0 node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n37: 0x10515f288 uv__work_done [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n38: 0x105162d38 uv__async_io [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n39: 0x10517654c uv__io_poll [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n40: 0x1051632a0 uv_run [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n41: 0x10449a508 node::SpinEventLoopInternal(node::Environment*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n42: 0x1045dc45c node::NodeMainInstance::Run() [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n43: 0x1045514cc node::Start(int, char**) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n44: 0x18f232b98 start [/usr/lib/dyld]\n",
      "stderr": "\n<--- Last few GCs --->\n\n[52288:0x148008000]    13782 ms: Scavenge (interleaved) 4063.3 (4127.3) -> 4061.1 (4128.5) MB, pooled: 0 MB, 9.08 / 0.00 ms  (average mu = 0.235, current mu = 0.117) allocation failure; \n[52288:0x148008000]    13828 ms: Scavenge (interleaved) 4064.5 (4128.5) -> 4063.4 (4149.0) MB, pooled: 0 MB, 43.83 / 0.00 ms  (average mu = 0.235, current mu = 0.117) allocation failure; \n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory\n----- Native stack trace -----\n\n 1: 0x104593484 node::OOMErrorHandler(char const*, v8::OOMDetails const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 2: 0x104759bfc v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 3: 0x104967b54 v8::internal::Heap::stack() [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 4: 0x104965ef4 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 5: 0x10495a4dc v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 6: 0x10495ad14 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 7: 0x10493e034 v8::internal::Factory::NewFillerObject(int, v8::internal::AllocationAlignment, v8::internal::AllocationType, v8::internal::AllocationOrigin) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 8: 0x104d59710 v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n 9: 0x105219af4 Builtins_CEntry_Return1_ArgvOnStack_NoBuiltinExit [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n10: 0x1051be704 Builtins_ExtractFastJSArray [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n11: 0x105251f94 Builtins_ArrayPrototypeSplice [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n12: 0x10affb120 \n13: 0x10b02f7a0 \n14: 0x10b02e96c \n15: 0x1051c1290 Builtins_AsyncFunctionAwaitResolveClosure [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n16: 0x10528c4d8 Builtins_PromiseFulfillReactionJob [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n17: 0x1051b1594 Builtins_RunMicrotasks [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n18: 0x105182af4 Builtins_JSRunMicrotasksEntry [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n19: 0x1048bfa90 v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n20: 0x1048c0338 v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n21: 0x1048c0470 v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n22: 0x1048ed6ec v8::internal::MicrotaskQueue::RunMicrotasks(v8::internal::Isolate*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n23: 0x1048ede70 v8::internal::MicrotaskQueue::PerformCheckpoint(v8::Isolate*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n24: 0x105186f98 Builtins_CallApiCallbackGeneric [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n25: 0x10b01a3f4 \n26: 0x105182c0c Builtins_JSEntryTrampoline [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n27: 0x1051828f4 Builtins_JSEntry [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n28: 0x1048bfad0 v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n29: 0x1048bf42c v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n30: 0x104770168 v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n31: 0x104499a80 node::InternalCallbackScope::Close() [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n32: 0x104499cc4 node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context, v8::Local<v8::Value>) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n33: 0x1044af16c node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n34: 0x104598fe4 node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n35: 0x104599cd0 node::fs::AfterInteger(uv_fs_s*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n36: 0x10458b9a0 node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n37: 0x10515f288 uv__work_done [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n38: 0x105162d38 uv__async_io [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n39: 0x10517654c uv__io_poll [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n40: 0x1051632a0 uv_run [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n41: 0x10449a508 node::SpinEventLoopInternal(node::Environment*) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n42: 0x1045dc45c node::NodeMainInstance::Run() [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n43: 0x1045514cc node::Start(int, char**) [/Users/abraraslam/.nvm/versions/node/v22.15.1/bin/node]\n44: 0x18f232b98 start [/usr/lib/dyld]\n",
      "critical": true
    },
    {
      "name": "City Backfill",
      "status": "PASSED",
      "output": "\n> vite_react_shadcn_ts@0.0.0 play:backfill:city\n> node automations/lib/yaml-runner.js automations/ig/backfill-city.yml\n\n🚀 Starting YAML playbook: backfill-city.yml\n📂 Working directory: /Users/abraraslam/Desktop/wedding-vendor-chronicles\n📋 Playbook: Instagram Vendor Backfill by City\n📝 Description: Discover and enrich Instagram vendors for specific city/state/category combination\n\n🔄 Step 1: Validate required parameters\n⏭️  Step 1: Condition not met, skipping\n\n🔄 Step 2: Load seed data for city/state/category\n📊 Reading CSV with filter: { CITY: 'Dallas', STATE: 'TX', CATEGORY: 'undefined' }\n📊 Read 0 rows from ig_mcp_apify_seed.csv (filtered from 0unknown total)\n📝 Registered result as: city_seeds\n✅ Step 2: Completed\n\n🔄 Step 3: Log city processing start\nℹ️ Found 0 seed entries for Dallas, TX in category undefined\n✅ Step 3: Completed\n\n🔄 Step 4: Skip if no seeds found\n⚠️ No seed data found for Dallas, TX - undefined. Exiting.\n✅ Step 4: Completed\n\n🔄 Step 5: Initialize discovered usernames collection\n⏭️  Step 5: Condition not met, skipping\n\n🔄 Step 6: Discover Instagram usernames using search terms\n⏭️  Step 6: Condition not met, skipping\n\n🔄 Step 7: Discover Instagram usernames using location hashtags\n⏭️  Step 7: Condition not met, skipping\n\n🔄 Step 8: Extract usernames from search results\n⏭️  Step 8: Condition not met, skipping\n\n🔄 Step 9: Extract usernames from location search results\n⏭️  Step 9: Condition not met, skipping\n\n🔄 Step 10: Combine all discovered profiles\n⏭️  Step 10: Condition not met, skipping\n\n🔄 Step 11: Flatten combined profiles\n⏭️  Step 11: Condition not met, skipping\n\n🔄 Step 12: Deduplicate discovered usernames\n⏭️  Step 12: Condition not met, skipping\n\n🔄 Step 13: Log discovery results\n⏭️  Step 13: Condition not met, skipping\n\n🔄 Step 14: Limit enrichment to max specified\n⏭️  Step 14: Condition not met, skipping\n\n🔄 Step 15: Log enrichment start\n⏭️  Step 15: Condition not met, skipping\n\n🔄 Step 16: Enrich profile details via Apify\n⏭️  Step 16: Condition not met, skipping\n\n🔄 Step 17: Normalize vendor data for city\n⏭️  Step 17: Condition not met, skipping\n\n🔄 Step 18: Log normalization results\n⏭️  Step 18: Condition not met, skipping\n\n🔄 Step 19: Buffer normalized vendors for batch processing\n⏭️  Step 19: Condition not met, skipping\n\n🔄 Step 20: Flush all vendor batches to ingest API\n⏭️  Step 20: Condition not met, skipping\n\n🔄 Step 21: Send each batch to ingest API\n⏭️  Step 21: Condition not met, skipping\n\n🔄 Step 22: Log final results\n⏭️  Step 22: Condition not met, skipping\n\n🔄 Step 23: Log no results case\n⚠️ No vendors processed for Dallas, TX - undefined\n✅ Step 23: Completed\n✅ Playbook completed successfully\n",
      "error": null,
      "critical": true
    },
    {
      "name": "Maintenance Due",
      "status": "PASSED",
      "output": "\n> vite_react_shadcn_ts@0.0.0 play:maintain:due\n> node automations/lib/yaml-runner.js automations/ig/maintenance-due.yml\n\n🚀 Starting YAML playbook: maintenance-due.yml\n📂 Working directory: /Users/abraraslam/Desktop/wedding-vendor-chronicles\n📋 Playbook: Instagram Vendor Maintenance - Due for Refresh\n📝 Description: Refresh Instagram vendors that are due for updates based on vendor_refresh schedule\n\n🔄 Step 1: Query vendors due for refresh\n🔧 MCP Tool: github.com/supabase-community/supabase-mcp/execute_sql\n📊 Arguments: [ 'query' ]\n🗄️  Supabase MCP query executed: 0 rows returned\n📝 Registered result as: due_vendors\n✅ Step 1: Completed\n\n🔄 Step 2: Log vendors found for refresh\nℹ️ Found 0 vendors due for refresh\n✅ Step 2: Completed\n\n🔄 Step 3: Skip if no vendors due\nℹ️ No vendors due for refresh at this time\n✅ Step 3: Completed\n\n🔄 Step 4: Extract usernames for enrichment\n⏭️  Step 4: Condition not met, skipping\n\n🔄 Step 5: Log enrichment start\n⏭️  Step 5: Condition not met, skipping\n\n🔄 Step 6: Enrich vendor profiles via Apify\n⏭️  Step 6: Condition not met, skipping\n\n🔄 Step 7: Normalize refreshed vendor data\n⏭️  Step 7: Condition not met, skipping\n\n🔄 Step 8: Log normalization results\n⏭️  Step 8: Condition not met, skipping\n\n🔄 Step 9: Buffer normalized vendors for batch processing\n⏭️  Step 9: Condition not met, skipping\n\n🔄 Step 10: Flush all vendor batches to ingest API\n⏭️  Step 10: Condition not met, skipping\n\n🔄 Step 11: Send each batch to ingest API\n⏭️  Step 11: Condition not met, skipping\n\n🔄 Step 12: Log maintenance completion\n⏭️  Step 12: Condition not met, skipping\n\n🔄 Step 13: Update vendor refresh tracking\n⏭️  Step 13: Condition not met, skipping\n\n🔄 Step 14: Log refresh tracking update\n⏭️  Step 14: Condition not met, skipping\n\n🔄 Step 15: Log no maintenance needed\nℹ️ No maintenance refresh performed - no vendors due\n✅ Step 15: Completed\n✅ Playbook completed successfully\n",
      "error": null,
      "critical": false
    }
  ]
}