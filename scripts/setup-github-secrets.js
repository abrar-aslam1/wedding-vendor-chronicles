#!/usr/bin/env node

/**
 * GitHub Secrets Setup Helper
 * 
 * This script reads your local .env file and generates GitHub CLI commands
 * to set up all required secrets for Instagram vendor automation workflows.
 * 
 * Usage:
 *   node scripts/setup-github-secrets.js
 *   
 * Prerequisites:
 *   - GitHub CLI installed: https://cli.github.com/
 *   - Authenticated: gh auth login
 *   - Set APP_URL for production in the script below
 */

import fs from 'fs'
import path from 'path'

class GitHubSecretsSetup {
  constructor() {
    this.envPath = '.env'
    this.secrets = new Map()
    this.productionOverrides = {
      // Override localhost with your production URL
      'APP_URL': 'https://findmyweddingvendor.com'
    }
  }

  loadEnvFile() {
    try {
      const envContent = fs.readFileSync(this.envPath, 'utf8')
      
      envContent.split('\n').forEach(line => {
        const trimmed = line.trim()
        
        // Skip comments and empty lines
        if (trimmed.startsWith('#') || !trimmed.includes('=')) {
          return
        }
        
        const [key, ...valueParts] = trimmed.split('=')
        const value = valueParts.join('=') // Handle values with = signs
        
        if (key && value) {
          this.secrets.set(key.trim(), value.trim())
        }
      })
      
      console.log(`✅ Loaded ${this.secrets.size} environment variables from ${this.envPath}`)
      
    } catch (error) {
      console.error(`❌ Failed to read ${this.envPath}:`, error.message)
      process.exit(1)
    }
  }

  applyProductionOverrides() {
    for (const [key, value] of Object.entries(this.productionOverrides)) {
      this.secrets.set(key, value)
      console.log(`🔄 Override applied: ${key} = ${value}`)
    }
  }

  generateGitHubCommands() {
    const commands = []
    
    console.log('\n📋 GitHub CLI Commands to Set Repository Secrets:')
    console.log('═'.repeat(80))
    
    // Essential secrets for automation
    const requiredSecrets = [
      'APP_URL',
      'INGEST_SHARED_KEY',
      'VITE_SUPABASE_URL',
      'VITE_SUPABASE_ANON_KEY', 
      'SUPABASE_URL',
      'SUPABASE_SERVICE_ROLE_KEY',
      'NEXT_PUBLIC_SUPABASE_URL',
      'SUPABASE_SERVICE_ROLE',
      'DATAFORSEO_LOGIN',
      'DATAFORSEO_PASSWORD',
      'MCP_APIFY_RPS',
      'MCP_APIFY_BURST', 
      'MIN_FOLLOWERS',
      'MIN_POSTS'
    ]
    
    // Optional secrets (Stripe not needed for automation)
    const optionalSecrets = [
      'VITE_STRIPE_PUBLISHABLE_KEY',
      'STRIPE_SECRET_KEY',
      'STRIPE_WEBHOOK_SECRET',
      'VITE_STRIPE_SECRET_KEY'
    ]
    
    console.log('\n🔥 REQUIRED SECRETS (for automation):')
    requiredSecrets.forEach(key => {
      const value = this.secrets.get(key)
      if (value) {
        const command = `gh secret set ${key} --body "${value}"`
        commands.push(command)
        console.log(command)
      } else {
        console.log(`⚠️  MISSING: ${key} (not found in .env file)`)
      }
    })
    
    console.log('\n🔧 OPTIONAL SECRETS (for full functionality):')
    optionalSecrets.forEach(key => {
      const value = this.secrets.get(key)
      if (value) {
        const command = `gh secret set ${key} --body "${value}"`
        commands.push(command)
        console.log(command)
      } else {
        console.log(`ℹ️  SKIPPED: ${key} (not found in .env file)`)
      }
    })
    
    return commands
  }

  generateBatchScript() {
    const commands = this.generateGitHubCommands()
    
    const bashScript = `#!/bin/bash

# GitHub Secrets Setup Script
# Generated by: node scripts/setup-github-secrets.js
# 
# Prerequisites:
#   - GitHub CLI installed and authenticated
#   - Repository access permissions

set -e

echo "🚀 Setting up GitHub repository secrets for Instagram vendor automation..."
echo "📁 Repository: $(git remote get-url origin)"
echo ""

${commands.join('\n')}

echo ""
echo "✅ GitHub secrets setup complete!"
echo "🔗 View secrets at: https://github.com/$(gh repo view --json owner,name -q '.owner.login + "/" + .name')/settings/secrets/actions"
echo ""
echo "📋 Next steps:"
echo "1. Update APP_URL secret with your production URL"
echo "2. Test workflows: GitHub → Actions → Run workflow manually"
echo "3. Visit admin dashboard: [your-production-url]/admin/approvals"
`
    
    fs.writeFileSync('setup-github-secrets.sh', bashScript)
    fs.chmodSync('setup-github-secrets.sh', 0o755)
    
    console.log('\n📝 Generated executable script: setup-github-secrets.sh')
    console.log('Run: ./setup-github-secrets.sh')
  }

  validateConfiguration() {
    console.log('\n🔍 Configuration Validation:')
    console.log('═'.repeat(50))
    
    const checks = [
      {
        name: 'Supabase URL',
        key: 'NEXT_PUBLIC_SUPABASE_URL',
        test: (val) => val && val.includes('supabase.co')
      },
      {
        name: 'Supabase Service Role',
        key: 'SUPABASE_SERVICE_ROLE',
        test: (val) => val && val.startsWith('eyJ') && val.length > 100
      },
      {
        name: 'Production URL',
        key: 'APP_URL', 
        test: (val) => val && (val.startsWith('https://') || val.startsWith('http://localhost'))
      },
      {
        name: 'Ingest Key',
        key: 'INGEST_SHARED_KEY',
        test: (val) => val && val.length > 10
      },
      {
        name: 'Rate Limiting',
        key: 'MCP_APIFY_RPS',
        test: (val) => val && parseInt(val) >= 1
      }
    ]
    
    let allValid = true
    
    checks.forEach(check => {
      const value = this.secrets.get(check.key)
      const isValid = check.test(value)
      
      const status = isValid ? '✅' : '❌'
      console.log(`${status} ${check.name}: ${isValid ? 'Valid' : 'Invalid/Missing'}`)
      
      if (!isValid) {
        allValid = false
        if (check.key === 'APP_URL' && value === 'http://localhost:3000') {
          console.log(`   ⚠️  Using localhost - update productionOverrides in this script`)
        }
      }
    })
    
    if (allValid) {
      console.log('\n🎉 All configuration checks passed!')
    } else {
      console.log('\n⚠️  Some configuration issues detected. Please review and fix.')
    }
    
    return allValid
  }

  run() {
    console.log('🔧 Instagram Vendor Automation - GitHub Secrets Setup')
    console.log('═'.repeat(60))
    
    this.loadEnvFile()
    this.applyProductionOverrides()
    this.validateConfiguration()
    this.generateBatchScript()
    
    console.log('\n🎯 Quick Setup:')
    console.log('1. Update APP_URL in this script with your production URL')
    console.log('2. Run: ./setup-github-secrets.sh')
    console.log('3. Check GitHub → Settings → Secrets and Variables → Actions')
  }
}

// CLI execution
const setup = new GitHubSecretsSetup()
setup.run()
