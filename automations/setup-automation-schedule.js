#!/usr/bin/env node

/**
 * Instagram Vendor Automation Scheduler Setup
 * 
 * This script sets up automated scheduling for Instagram vendor collection
 * with built-in approval workflows and notifications.
 */

import fs from 'fs/promises'

class AutomationScheduler {
  constructor() {
    this.schedules = {
      // Daily QC reports at 6 AM
      'qc-daily': {
        cron: '0 6 * * *',
        command: 'npm run play:qc:daily',
        description: 'Daily quality control report',
        enabled: true
      },
      
      // Weekly maintenance on Sundays at 2 AM  
      'maintenance-weekly': {
        cron: '0 2 * * 0',
        command: 'npm run play:maintain:due',
        description: 'Weekly vendor maintenance refresh',
        enabled: true
      },
      
      // Monthly tier backfill on 1st at midnight
      'backfill-tier1': {
        cron: '0 0 1 * *',
        command: 'TIER=1 LIMIT_PER_ROW=40 MAX_ENRICH=400 npm run play:backfill:tier',
        description: 'Monthly Tier 1 cities backfill',
        enabled: true,
        requiresApproval: true
      },
      
      // Monthly tier backfill on 2nd at midnight  
      'backfill-tier2': {
        cron: '0 0 2 * *',
        command: 'TIER=2 LIMIT_PER_ROW=30 MAX_ENRICH=300 npm run play:backfill:tier',
        description: 'Monthly Tier 2 cities backfill',
        enabled: true,
        requiresApproval: true
      },
      
      // City-specific backfills (multiple major cities)
      'backfill-dallas': {
        cron: '0 1 15 * *', // 15th of each month at 1 AM
        command: 'CITY="Dallas" STATE="TX" CATEGORY="wedding-photographers" LIMIT_PER_ROW=30 MAX_ENRICH=200 npm run play:backfill:city',
        description: 'Monthly Dallas wedding photographers backfill',
        enabled: false,
        requiresApproval: true
      },
      
      'backfill-austin': {
        cron: '0 2 15 * *', // 15th of each month at 2 AM
        command: 'CITY="Austin" STATE="TX" CATEGORY="wedding-photographers" LIMIT_PER_ROW=25 MAX_ENRICH=150 npm run play:backfill:city',
        description: 'Monthly Austin wedding photographers backfill',
        enabled: false,
        requiresApproval: true
      },
      
      'backfill-houston': {
        cron: '0 3 15 * *', // 15th of each month at 3 AM
        command: 'CITY="Houston" STATE="TX" CATEGORY="wedding-photographers" LIMIT_PER_ROW=25 MAX_ENRICH=150 npm run play:backfill:city',
        description: 'Monthly Houston wedding photographers backfill',
        enabled: false,
        requiresApproval: true
      }
    }
  }

  async generateCronFile() {
    const cronEntries = []
    
    cronEntries.push('# Instagram Vendor Automation Schedule')
    cronEntries.push('# Generated by setup-automation-schedule.js')
    cronEntries.push('# Edit this file to customize scheduling')
    cronEntries.push('')
    
    // Set environment variables
    cronEntries.push('# Environment setup')
    cronEntries.push('PATH=/usr/local/bin:/usr/bin:/bin')
    cronEntries.push('NODE_PATH=/usr/local/lib/node_modules')
    cronEntries.push('')
    
    for (const [jobName, config] of Object.entries(this.schedules)) {
      if (!config.enabled) {
        cronEntries.push(`# DISABLED: ${config.description}`)
        cronEntries.push(`# ${config.cron} cd ${process.cwd()} && ${config.command} >> logs/automation.log 2>&1`)
      } else {
        cronEntries.push(`# ${config.description}`)
        
        if (config.requiresApproval) {
          // Jobs requiring approval run a pre-approval check first
          cronEntries.push(`${config.cron} cd ${process.cwd()} && node automations/check-approval.js "${jobName}" && ${config.command} >> logs/automation.log 2>&1`)
        } else {
          // Direct execution for safe operations
          cronEntries.push(`${config.cron} cd ${process.cwd()} && ${config.command} >> logs/automation.log 2>&1`)
        }
      }
      cronEntries.push('')
    }
    
    const cronContent = cronEntries.join('\n')
    
    // Write to cron file
    await fs.writeFile('automations/instagram-automation.cron', cronContent)
    
    return cronContent
  }

  async generateInstallScript() {
    const script = `#!/bin/bash

# Instagram Vendor Automation Setup Script
# This script installs the automation schedule and sets up required directories

set -e

echo "üöÄ Setting up Instagram Vendor Automation..."

# Create required directories
mkdir -p logs
mkdir -p automations/approvals

# Create logs directory and initial files
touch logs/automation.log
touch logs/approval.log

echo "üìÅ Created directory structure"

# Install the cron job
if command -v crontab &> /dev/null; then
    echo "üìÖ Installing cron schedule..."
    
    # Backup existing crontab
    crontab -l > crontab.backup 2>/dev/null || true
    
    # Add our automation schedule
    (crontab -l 2>/dev/null; cat automations/instagram-automation.cron) | crontab -
    
    echo "‚úÖ Cron schedule installed successfully"
    echo "üìù Backup of previous crontab saved to: crontab.backup"
else
    echo "‚ö†Ô∏è  crontab not found - you'll need to manually schedule the automations"
    echo "üìÑ Generated schedule file: automations/instagram-automation.cron"
fi

echo "üéâ Automation setup complete!"
echo ""
echo "üìã Next steps:"
echo "1. Review the schedule: automations/instagram-automation.cron"
echo "2. Enable specific city backfills by editing the schedule"
echo "3. Set up approval notifications"
echo "4. Monitor logs: tail -f logs/automation.log"
echo ""
echo "üîß To modify schedule: crontab -e"
echo "üìä To view current schedule: crontab -l"
`
    
    await fs.writeFile('automations/install-automation.sh', script)
    
    // Make executable
    await fs.chmod('automations/install-automation.sh', 0o755)
    
    return script
  }

  async generateDatabaseMigration() {
    const migration = `-- Create automation approvals table
CREATE TABLE IF NOT EXISTS automation_approvals (
  id SERIAL PRIMARY KEY,
  job_name TEXT NOT NULL,
  approval_date DATE NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  request_details TEXT,
  requested_at TIMESTAMP DEFAULT NOW(),
  approved_by TEXT,
  approved_at TIMESTAMP,
  rejection_reason TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  
  -- Ensure only one approval record per job per day
  UNIQUE(job_name, approval_date)
);

-- Create index for faster lookups
CREATE INDEX IF NOT EXISTS idx_automation_approvals_status 
  ON automation_approvals(status, approval_date);
CREATE INDEX IF NOT EXISTS idx_automation_approvals_job_date 
  ON automation_approvals(job_name, approval_date);

-- Enable RLS (Row Level Security)
ALTER TABLE automation_approvals ENABLE ROW LEVEL SECURITY;

-- Create policy for service role access
CREATE POLICY "Service role can manage automation_approvals" 
  ON automation_approvals
  FOR ALL 
  TO service_role 
  USING (true) 
  WITH CHECK (true);

-- Create policy for authenticated users to view approvals
CREATE POLICY "Authenticated users can view automation_approvals" 
  ON automation_approvals
  FOR SELECT 
  TO authenticated 
  USING (true);

-- Insert some sample approval requests for demonstration
INSERT INTO automation_approvals (job_name, approval_date, status, request_details) 
VALUES 
  ('backfill-tier1', CURRENT_DATE, 'pending', 'Collect Instagram vendors from Tier 1 cities (major metros)'),
  ('backfill-dallas', CURRENT_DATE + 1, 'pending', 'Collect wedding photographers from Dallas, TX')
ON CONFLICT (job_name, approval_date) DO NOTHING;
`
    
    await fs.writeFile('automations/database-migration.sql', migration)
    
    return migration
  }

  async setup() {
    console.log('üöÄ Setting up Instagram Vendor Automation Schedule...')
    
    // Create automations directory if it doesn't exist
    await fs.mkdir('automations', { recursive: true })
    
    // Generate all files
    const cronContent = await this.generateCronFile()
    await this.generateInstallScript()
    await this.generateDatabaseMigration()
    
    console.log('‚úÖ Generated automation files:')
    console.log('  üìÖ automations/instagram-automation.cron')
    console.log('  üîß automations/install-automation.sh')
    console.log('  üóÑÔ∏è  automations/database-migration.sql')
    
    return {
      cronContent,
      schedules: this.schedules
    }
  }
}

// CLI execution
async function main() {
  const scheduler = new AutomationScheduler()
  await scheduler.setup()
  
  console.log('\nüéâ Automation setup complete!')
  console.log('\nüìã Next steps:')
  console.log('1. Run database migration: Execute automations/database-migration.sql in Supabase')
  console.log('2. Install schedule: chmod +x automations/install-automation.sh && ./automations/install-automation.sh')
  console.log('3. Monitor logs: tail -f logs/automation.log')
  
  console.log('\nüîß Available commands:')
  console.log('  crontab -l                    # View current schedule')
  console.log('  tail -f logs/automation.log   # Monitor automation logs')
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { AutomationScheduler }
