name: "Instagram Vendor Maintenance - Due for Refresh"
description: "Refresh Instagram vendors that are due for updates based on vendor_refresh schedule"

config:
  batch_size: "${env.BATCH || '50'}"
  app_url: "${env.APP_URL || 'http://localhost:3000'}"
  ingest_key: "${env.INGEST_SHARED_KEY}"

steps:
  - name: "Query vendors due for refresh"
    action: supabase_query
    params:
      query: |
        SELECT 
          iv.id,
          iv.instagram_handle,
          iv.business_name,
          iv.category,
          iv.city,
          iv.state,
          iv.updated_at,
          vr.next_check_at,
          vr.update_count
        FROM instagram_vendors iv
        LEFT JOIN vendor_refresh vr ON iv.id = vr.vendor_id AND vr.vendor_type = 'instagram'
        WHERE 
          vr.next_check_at <= NOW() 
          OR vr.next_check_at IS NULL
        ORDER BY 
          COALESCE(vr.next_check_at, '1900-01-01'::timestamp) ASC,
          iv.updated_at ASC
        LIMIT $1
      params:
        - "${config.batch_size}"
    register: due_vendors

  - name: "Log vendors found for refresh"
    action: log
    params:
      message: "Found ${vars.due_vendors.length} vendors due for refresh"
      level: info

  - name: "Skip if no vendors due"
    action: log
    params:
      message: "No vendors due for refresh at this time"
      level: info
    when: "vars.due_vendors.length === 0"

  - name: "Extract usernames for enrichment"
    action: transform_data
    params:
      source: "vars.due_vendors"
      transforms:
        username: "${instagram_handle}"
        vendor_id: "${id}"
        category: "${category}"
        city: "${city}"
        state: "${state}"
        last_update_count: "${update_count || 0}"
    register: usernames_to_refresh
    when: "vars.due_vendors.length > 0"

  - name: "Log enrichment start"
    action: log
    params:
      message: "Enriching ${vars.usernames_to_refresh.length} vendor profiles for maintenance refresh"
      level: info
    when: "vars.usernames_to_refresh"

  - name: "Enrich vendor profiles via Apify"
    action: mcp_tool
    params:
      server: "github.com/apify/actors-mcp-server"
      tool: "call-actor"
      arguments:
        actor: "apify/instagram-scraper"
        step: "call"
        input:
          usernames: "vars.usernames_to_refresh"
          resultsType: "details"
    register: enriched_profiles
    when: "vars.usernames_to_refresh"

  - name: "Normalize refreshed vendor data"
    action: transform_data
    params:
      source: "vars.enriched_profiles"
      transforms:
        source: "apify_profile_refresh"
        ig_username: "${username.toLowerCase()}"
        ig_user_id: "${id}"
        display_name: "${full_name || username}"
        bio: "${biography}"
        website_url: "${external_url}"
        email: 
          type: "map"
          source: "contact_email"
          mapping: {}
          default: null
        phone:
          type: "map" 
          source: "contact_phone"
          mapping: {}
          default: null
        category: "${category}"
        city: "${city}"
        state: "${state}"
        country: "US"
        followers: "${follower_count}"
        posts_count: "${media_count}"
        profile_pic_url: "${profile_pic_url}"
        external_urls: "${external_urls}"
        tags: "${hashtags}"
        has_contact: "${Boolean(contact_email || contact_phone || external_url)}"
        has_location: "${Boolean(city && state)}"
    register: normalized_vendors
    when: "vars.enriched_profiles"

  - name: "Log normalization results"
    action: log
    params:
      message: "Normalized ${vars.normalized_vendors.length} refreshed vendor profiles"
      level: info
    when: "vars.normalized_vendors"

  - name: "Buffer normalized vendors for batch processing"
    action: buffer_collection
    params:
      buffer_name: "refresh_batch"
      data: "vars.normalized_vendors"
      batch_size: 25
    register: buffer_status
    when: "vars.normalized_vendors"

  - name: "Flush all vendor batches to ingest API"
    action: flush_buffer
    params:
      buffer_name: "refresh_batch"
      batch_size: 25
      all: true
    register: flushed_batches
    when: "vars.buffer_status"

  - name: "Send each batch to ingest API"
    action: http_post
    params:
      url: "${config.app_url}/functions/v1/ingest-instagram"
      data:
        vendors: "${batch}"
      headers:
        X-Ingest-Key: "${config.ingest_key}"
      throttle:
        key: "ingest_api"
        rps: 2
        burst: 5
    register: ingest_responses
    when: "vars.flushed_batches"

  - name: "Log maintenance completion"
    action: log
    params:
      message: "Maintenance refresh completed. Processed ${vars.flushed_batches.flushed_count} vendors in ${vars.flushed_batches.batches.length} batches"
      level: info
    track_result: true
    when: "vars.flushed_batches"

  - name: "Update vendor refresh tracking"
    action: supabase_query
    params:
      query: |
        UPDATE vendor_refresh 
        SET 
          last_updated = NOW(),
          next_check_at = NOW() + INTERVAL '7 days',
          update_count = update_count + 1
        WHERE vendor_id = ANY($1::int[]) AND vendor_type = 'instagram'
      params:
        - "${vars.due_vendors.map(v => v.id)}"
    register: refresh_update_result
    when: "vars.due_vendors && vars.flushed_batches"

  - name: "Log refresh tracking update"
    action: log
    params:
      message: "Updated refresh schedules for ${vars.due_vendors.length} vendors (next check in 7 days)"
      level: info
    when: "vars.refresh_update_result"

  - name: "Log no maintenance needed"
    action: log
    params:
      message: "No maintenance refresh performed - no vendors due"
      level: info
    track_result: true
    when: "!vars.flushed_batches"
